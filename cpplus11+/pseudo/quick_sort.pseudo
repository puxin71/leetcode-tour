//pseudocode for quick sort main algorithm
procedure quickSort(arr[], low, high)
    arr = list to be sorted
    low = first element of array
    high = last element of array

    if (low < high)
    {
       // pivot â€“ pivot element around which array will be partitioned  
        pivot = partition(arr, low, high);
        quickSort(arr, low, pivot - 1);  // call quicksort recursively to sort sub array before pivot
        quickSort(arr, pivot + 1, high); // call quicksort recursively to sort sub array after pivot
    }
end procedure

//partition procedure selects the last element as pivot. Then places the pivot at the correct position in 
//the array such that all elements lower than pivot are in the first half of the array and the 
//elements higher than pivot are at the higher side of the array.
procedure partition (arr[], low, high)
    // pivot (Element to be placed at right position)
    pivot = arr[high];  
     i = (low - 1)  // Index of smaller element
    for j = low to high
    {
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap arr[i] and arr[j]
        }
    }
    swap arr[i + 1] and arr[high])
    return (i + 1)
end procedure